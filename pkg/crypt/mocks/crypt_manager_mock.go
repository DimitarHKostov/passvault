// Code generated by MockGen. DO NOT EDIT.
// Source: crypt_manager_interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCryptManagerInterface is a mock of CryptManagerInterface interface.
type MockCryptManagerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCryptManagerInterfaceMockRecorder
}

// MockCryptManagerInterfaceMockRecorder is the mock recorder for MockCryptManagerInterface.
type MockCryptManagerInterfaceMockRecorder struct {
	mock *MockCryptManagerInterface
}

// NewMockCryptManagerInterface creates a new mock instance.
func NewMockCryptManagerInterface(ctrl *gomock.Controller) *MockCryptManagerInterface {
	mock := &MockCryptManagerInterface{ctrl: ctrl}
	mock.recorder = &MockCryptManagerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCryptManagerInterface) EXPECT() *MockCryptManagerInterfaceMockRecorder {
	return m.recorder
}

// Decrypt mocks base method.
func (m *MockCryptManagerInterface) Decrypt(arg0 string) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decrypt", arg0)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decrypt indicates an expected call of Decrypt.
func (mr *MockCryptManagerInterfaceMockRecorder) Decrypt(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decrypt", reflect.TypeOf((*MockCryptManagerInterface)(nil).Decrypt), arg0)
}

// Encrypt mocks base method.
func (m *MockCryptManagerInterface) Encrypt(arg0 string) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encrypt", arg0)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encrypt indicates an expected call of Encrypt.
func (mr *MockCryptManagerInterfaceMockRecorder) Encrypt(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encrypt", reflect.TypeOf((*MockCryptManagerInterface)(nil).Encrypt), arg0)
}
