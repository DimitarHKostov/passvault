// Code generated by MockGen. DO NOT EDIT.
// Source: log_manager_interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockLogManagerInterface is a mock of LogManagerInterface interface.
type MockLogManagerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockLogManagerInterfaceMockRecorder
}

// MockLogManagerInterfaceMockRecorder is the mock recorder for MockLogManagerInterface.
type MockLogManagerInterfaceMockRecorder struct {
	mock *MockLogManagerInterface
}

// NewMockLogManagerInterface creates a new mock instance.
func NewMockLogManagerInterface(ctrl *gomock.Controller) *MockLogManagerInterface {
	mock := &MockLogManagerInterface{ctrl: ctrl}
	mock.recorder = &MockLogManagerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogManagerInterface) EXPECT() *MockLogManagerInterfaceMockRecorder {
	return m.recorder
}

// LogDebug mocks base method.
func (m *MockLogManagerInterface) LogDebug(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LogDebug", arg0)
}

// LogDebug indicates an expected call of LogDebug.
func (mr *MockLogManagerInterfaceMockRecorder) LogDebug(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogDebug", reflect.TypeOf((*MockLogManagerInterface)(nil).LogDebug), arg0)
}

// LogError mocks base method.
func (m *MockLogManagerInterface) LogError(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LogError", arg0)
}

// LogError indicates an expected call of LogError.
func (mr *MockLogManagerInterfaceMockRecorder) LogError(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogError", reflect.TypeOf((*MockLogManagerInterface)(nil).LogError), arg0)
}

// LogFatal mocks base method.
func (m *MockLogManagerInterface) LogFatal(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LogFatal", arg0)
}

// LogFatal indicates an expected call of LogFatal.
func (mr *MockLogManagerInterfaceMockRecorder) LogFatal(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogFatal", reflect.TypeOf((*MockLogManagerInterface)(nil).LogFatal), arg0)
}

// LogInfo mocks base method.
func (m *MockLogManagerInterface) LogInfo(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LogInfo", arg0)
}

// LogInfo indicates an expected call of LogInfo.
func (mr *MockLogManagerInterfaceMockRecorder) LogInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogInfo", reflect.TypeOf((*MockLogManagerInterface)(nil).LogInfo), arg0)
}

// LogPanic mocks base method.
func (m *MockLogManagerInterface) LogPanic(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LogPanic", arg0)
}

// LogPanic indicates an expected call of LogPanic.
func (mr *MockLogManagerInterfaceMockRecorder) LogPanic(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogPanic", reflect.TypeOf((*MockLogManagerInterface)(nil).LogPanic), arg0)
}
