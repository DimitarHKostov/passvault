// Code generated by MockGen. DO NOT EDIT.
// Source: database_manager_interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	types "passvault/pkg/types"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDatabaseManagerInterface is a mock of DatabaseManagerInterface interface.
type MockDatabaseManagerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseManagerInterfaceMockRecorder
}

// MockDatabaseManagerInterfaceMockRecorder is the mock recorder for MockDatabaseManagerInterface.
type MockDatabaseManagerInterfaceMockRecorder struct {
	mock *MockDatabaseManagerInterface
}

// NewMockDatabaseManagerInterface creates a new mock instance.
func NewMockDatabaseManagerInterface(ctrl *gomock.Controller) *MockDatabaseManagerInterface {
	mock := &MockDatabaseManagerInterface{ctrl: ctrl}
	mock.recorder = &MockDatabaseManagerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabaseManagerInterface) EXPECT() *MockDatabaseManagerInterfaceMockRecorder {
	return m.recorder
}

// Contains mocks base method.
func (m *MockDatabaseManagerInterface) Contains(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Contains", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Contains indicates an expected call of Contains.
func (mr *MockDatabaseManagerInterfaceMockRecorder) Contains(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Contains", reflect.TypeOf((*MockDatabaseManagerInterface)(nil).Contains), arg0)
}

// Get mocks base method.
func (m *MockDatabaseManagerInterface) Get(arg0 string) (*types.Entry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*types.Entry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockDatabaseManagerInterfaceMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDatabaseManagerInterface)(nil).Get), arg0)
}

// Save mocks base method.
func (m *MockDatabaseManagerInterface) Save(arg0 types.Entry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockDatabaseManagerInterfaceMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockDatabaseManagerInterface)(nil).Save), arg0)
}

// Update mocks base method.
func (m *MockDatabaseManagerInterface) Update(entry types.Entry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", entry)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockDatabaseManagerInterfaceMockRecorder) Update(entry interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDatabaseManagerInterface)(nil).Update), entry)
}
