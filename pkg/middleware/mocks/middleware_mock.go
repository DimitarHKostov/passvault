// Code generated by MockGen. DO NOT EDIT.
// Source: middlware_interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMiddlewareInterface is a mock of MiddlewareInterface interface.
type MockMiddlewareInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMiddlewareInterfaceMockRecorder
}

// MockMiddlewareInterfaceMockRecorder is the mock recorder for MockMiddlewareInterface.
type MockMiddlewareInterfaceMockRecorder struct {
	mock *MockMiddlewareInterface
}

// NewMockMiddlewareInterface creates a new mock instance.
func NewMockMiddlewareInterface(ctrl *gomock.Controller) *MockMiddlewareInterface {
	mock := &MockMiddlewareInterface{ctrl: ctrl}
	mock.recorder = &MockMiddlewareInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMiddlewareInterface) EXPECT() *MockMiddlewareInterfaceMockRecorder {
	return m.recorder
}

// Intercept mocks base method.
func (m *MockMiddlewareInterface) Intercept(next http.HandlerFunc) http.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Intercept", next)
	ret0, _ := ret[0].(http.HandlerFunc)
	return ret0
}

// Intercept indicates an expected call of Intercept.
func (mr *MockMiddlewareInterfaceMockRecorder) Intercept(next interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Intercept", reflect.TypeOf((*MockMiddlewareInterface)(nil).Intercept), next)
}
